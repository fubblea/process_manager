name: Build & Release Tauri

on:
  push:
    branches: [main] # change if you release from another branch
  pull_request:
    branches: [main] # build only (no release)
  workflow_dispatch: # manual “Run workflow” button

permissions:
  contents: write

env:
  NODE_VERSION: 20
  RUST_TOOLCHAIN: stable

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Linux system dependencies
        run: |
          sudo apt update
          sudo apt install -y \
            build-essential curl wget file \
            libssl-dev libxdo-dev \
            libwebkit2gtk-4.1-dev \
            libgtk-3-dev libglib2.0-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}

      - name: Run tests
        run: |
          cd src-tauri
          cargo test

  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    # expose the package.json version to the next job
    outputs:
      version: ${{ steps.pkg_ver.outputs.version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # ---- Linux-only system libraries that Tauri/Wry expect ----
      - name: Install Linux system dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install -y \
            build-essential curl wget file \
            libssl-dev libxdo-dev \
            libwebkit2gtk-4.1-dev \
            libgtk-3-dev libglib2.0-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}

      - name: Install JS dependencies
        run: npm ci

      # ---- cross‑shell version extraction (works on Windows too) ----
      - name: Get version from package.json
        id: pkg_ver
        shell: bash
        run: |
          echo "version=$(node -p "require('./package.json').version")" >> "$GITHUB_OUTPUT"

      - name: Build Tauri bundles
        run: npm run tauri build

      # ---- version‑tagged artifact names ----
      - name: Upload bundle as artifact
        uses: actions/upload-artifact@v4
        with:
          # e.g. tauri-1.4.2-windows
          name: tauri-${{ steps.pkg_ver.outputs.version }}-${{ matrix.os }}
          if-no-files-found: error
          path: |
            src-tauri/target/release/bundle/**/**/process_manager*${{ steps.pkg_ver.outputs.version }}*

  # This is there to make it easy to set required builds in GitHub settings
  build-pass:
    needs: build
    runs-on: ubuntu-latest

    outputs:
      version: ${{ needs.build.outputs.version }}

    steps:
      - run: echo "Build Passed!"

  release:
    needs: [test, build-pass]
    # skip when event is pull_request
    if: github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # needed for github‑script tagging

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist # everything ends up under dist/**

      - name: Create or update git tag
        uses: actions/github-script@v7
        env:
          VERSION: ${{ needs.build-pass.outputs.version }}
        with:
          script: |
            const tag = `v${process.env.VERSION}`;
            const { owner, repo } = context.repo;
            const sha = context.sha;

            const existing = await github.rest.git.listMatchingRefs({
              owner,
              repo,
              ref: `tags/${tag}`
            });

            if (existing.data.length === 0) {
              await github.rest.git.createRef({
                owner,
                repo,
                ref: `refs/tags/${tag}`,
                sha
              });
              core.info(`✅ Created tag ${tag}`);
            } else {
              core.info(`ℹ️ Tag ${tag} already exists`);
            }

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.build-pass.outputs.version }}
          name: v${{ needs.build-pass.outputs.version }}
          generate_release_notes: true
          files: dist/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
