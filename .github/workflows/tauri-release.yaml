name: Build & Release Tauri

on:
  # Build on every push to main; you can add tags or PRs here too
  push:
    branches: [main]
  # Manual trigger
  workflow_dispatch:

env:
  NODE_VERSION: 20 # keep Node/Rust versions in one place
  RUST_TOOLCHAIN: stable

jobs:
  #───────────────────────────────────────────────────────────────────────────────
  # 1️⃣  Build the application on the three host OS'es
  #───────────────────────────────────────────────────────────────────────────────
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    outputs: # expose the version so later jobs can read it
      version: ${{ steps.pkg_ver.outputs.version }}

    steps:
      - name: ⬇️  Checkout sources
        uses: actions/checkout@v4

      - name: 🏷  Read version from package.json
        id: pkg_ver
        run: |
          echo "version=$(node -p 'require(\"./package.json\").version')" >> "$GITHUB_OUTPUT"

      - name: 🧰  Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: 🦀  Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}

      - name: 📦  Install JS deps
        run: npm ci

      - name: 🔨  Build Tauri bundle
        run: npm run tauri build

      #━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
      # Whatever Tauri spits out lives under target/**/bundle/* .
      # This grabs everything so nothing is missed.
      #━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
      - name: 📤  Upload bundle as artifact
        uses: actions/upload-artifact@v4
        with:
          name: tauri-${{ matrix.os }}
          path: |
            src-tauri/target/release/bundle/**/*

  #───────────────────────────────────────────────────────────────────────────────
  # 2️⃣  Create (or reuse) a git tag and publish a GitHub Release
  #     We do this once, after – and only if – all three builds succeed.
  #───────────────────────────────────────────────────────────────────────────────
  release:
    runs-on: ubuntu-latest
    needs: build # wait for all matrix builds to finish

    steps:
      - name: ⬇️  Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist # bundles end up in dist/**

      - name: 🏷  Ensure git tag exists
        env:
          VERSION: ${{ needs.build.outputs.version }}
        uses: actions/github-script@v7
        with:
          script: |
            const tag = `v${process.env.VERSION}`;
            const { owner, repo } = context.repo;

            // Check if tag already exists
            const existing = await github.rest.git.listMatchingRefs({
              owner,
              repo,
              ref: `tags/${tag}`
            });

            if (existing.data.length === 0) {
              await github.rest.git.createRef({
                owner,
                repo,
                ref: `refs/tags/${tag}`,
                sha: context.sha
              });
              core.info(`✅ Created tag ${tag}`);
            } else {
              core.info(`ℹ️ Tag ${tag} already exists – skipping`);
            }

      - name: 🚀  Create / update GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.build.outputs.version }}
          name: v${{ needs.build.outputs.version }}
          generate_release_notes: true
          files: dist/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
